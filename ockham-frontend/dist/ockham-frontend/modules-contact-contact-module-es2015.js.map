{"version":3,"sources":["./node_modules/ng-recaptcha/fesm2015/ng-recaptcha.js","./src/app/modules/contact/contact-form/contact-form.component.html","./src/app/modules/contact/contact.component.html","./src/app/core/services/contact.service.ts","./src/app/modules/contact/contact-form/contact-form.component.scss","./src/app/modules/contact/contact-form/contact-form.component.ts","./src/app/modules/contact/contact-routing.module.ts","./src/app/modules/contact/contact.component.scss","./src/app/modules/contact/contact.component.ts","./src/app/modules/contact/contact.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AAC0J;AAC9J;AACA;AACY;;AAEhE,+BAA+B,4DAAc;AAC7C,+BAA+B,4DAAc;AAC7C,4BAA4B,4DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,UAAU,WAAW,4BAA4B,UAAU;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yEAAiB,oEAAoE,+CAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAAiB;AAC7B,gCAAgC,oDAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wDAAU;AAC9D,IAAI,gEAAU;AACd,IAAI,qDAAO,IAAI,4DAAM,CAAC,yDAAW;AACjC,IAAI,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AAC7C,IAAI,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AAC7C,IAAI,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AAC7C,IAAI,wDAAU;AACd;AACA;;AAEA,+BAA+B,4DAAc;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,iEAAW;AACf,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,qBAAqB,wDAAU;AAC/B,IAAI,+DAAS;AACb;AACA;AACA;AACA,KAAK;AACL,IAAI,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AAC7C,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C;AACA,QAAQ,oDAAM;AACd;;AAEA;AACA;AACA,wBAAwB,wDAAU;AAClC,IAAI,8DAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wDAAU;AAChD,IAAI,8DAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,kCAAkC,4DAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,4BAA4B,4CAAO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","file":"modules-contact-contact-module-es2015.js","sourcesContent":["import { __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Optional, EventEmitter, Input, HostBinding, Output, Component, ElementRef, NgZone, NgModule, HostListener, Directive, forwardRef } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nconst RECAPTCHA_LANGUAGE = new InjectionToken('recaptcha-language');\nconst RECAPTCHA_BASE_URL = new InjectionToken('recaptcha-base-url');\nconst RECAPTCHA_NONCE = new InjectionToken('recaptcha-nonce-tag');\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = () => {\n        onLoaded(grecaptcha);\n    };\n    const script = document.createElement('script');\n    script.innerHTML = '';\n    const baseUrl = url || 'https://www.google.com/recaptcha/api.js';\n    script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n    if (nonce) {\n        // tslint:disable-next-line:no-any Remove \"any\" cast once we upgrade Angular to 7 and TypeScript along with it\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nlet RecaptchaLoaderService = RecaptchaLoaderService_1 = class RecaptchaLoaderService {\n    constructor(\n    // tslint:disable-next-line:no-any\n    platformId, language, baseUrl, nonce) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService_1.ready.asObservable() : of();\n    }\n    /** @internal */\n    init() {\n        if (RecaptchaLoaderService_1.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            const subject = new BehaviorSubject(null);\n            RecaptchaLoaderService_1.ready = subject;\n            const langParam = this.language ? '&hl=' + this.language : '';\n            loadScript('explicit', (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n        }\n    }\n};\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService = RecaptchaLoaderService_1 = __decorate([\n    Injectable(),\n    __param(0, Inject(PLATFORM_ID)),\n    __param(1, Optional()), __param(1, Inject(RECAPTCHA_LANGUAGE)),\n    __param(2, Optional()), __param(2, Inject(RECAPTCHA_BASE_URL)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [Object, String, String, String])\n], RecaptchaLoaderService);\nvar RecaptchaLoaderService_1;\n\nconst RECAPTCHA_SETTINGS = new InjectionToken('recaptcha-settings');\n\nlet nextId = 0;\nlet RecaptchaComponent = class RecaptchaComponent {\n    constructor(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = `ngrecaptcha-${nextId++}`;\n        this.resolved = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    ngAfterViewInit() {\n        this.subscription = this.loader.ready.subscribe((grecaptcha) => {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                this.grecaptcha = grecaptcha;\n                this.renderRecaptcha();\n            }\n        });\n    }\n    ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute() {\n        if (this.size !== 'invisible') {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    }\n    reset() {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    }\n    /** @internal */\n    expired() {\n        this.resolved.emit(null);\n    }\n    /** @internal */\n    captchaResponseCallback(response) {\n        this.resolved.emit(response);\n    }\n    /** @internal */\n    grecaptchaReset() {\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n        }\n    }\n    /** @internal */\n    renderRecaptcha() {\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n            badge: this.badge,\n            callback: (response) => {\n                this.zone.run(() => this.captchaResponseCallback(response));\n            },\n            'expired-callback': () => {\n                this.zone.run(() => this.expired());\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        });\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    }\n};\n__decorate([\n    Input(),\n    HostBinding('attr.id'),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"id\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"siteKey\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"type\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"size\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], RecaptchaComponent.prototype, \"tabIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"badge\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"resolved\", void 0);\nRecaptchaComponent = __decorate([\n    Component({\n        exportAs: 'reCaptcha',\n        selector: 're-captcha',\n        template: ``\n    }),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_SETTINGS)),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        RecaptchaLoaderService,\n        NgZone, Object])\n], RecaptchaComponent);\n\nlet RecaptchaCommonModule = class RecaptchaCommonModule {\n};\nRecaptchaCommonModule = __decorate([\n    NgModule({\n        declarations: [\n            RecaptchaComponent,\n        ],\n        exports: [\n            RecaptchaComponent,\n        ],\n    })\n], RecaptchaCommonModule);\n\nlet RecaptchaModule = RecaptchaModule_1 = class RecaptchaModule {\n    // We need this to maintain backwards-compatibility with v4. Removing this will be a breaking change\n    static forRoot() {\n        return RecaptchaModule_1;\n    }\n};\nRecaptchaModule = RecaptchaModule_1 = __decorate([\n    NgModule({\n        exports: [\n            RecaptchaComponent,\n        ],\n        imports: [\n            RecaptchaCommonModule,\n        ],\n        providers: [\n            RecaptchaLoaderService,\n        ],\n    })\n], RecaptchaModule);\nvar RecaptchaModule_1;\n\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken('recaptcha-v3-site-key');\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nlet ReCaptchaV3Service = class ReCaptchaV3Service {\n    constructor(zone, siteKey, \n    // tslint:disable-next-line:no-any\n    platformId, baseUrl, nonce) {\n        /** @internal */\n        this.onLoadComplete = (grecaptcha) => {\n            this.grecaptcha = grecaptcha;\n            if (this.actionBacklog && this.actionBacklog.length > 0) {\n                this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n                this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    get onExecute() {\n        if (!this.onExecuteSubject) {\n            this.onExecuteSubject = new Subject();\n            this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n        return this.onExecuteObservable;\n    }\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    execute(action) {\n        const subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                // todo: add to array of later executions\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    }\n    /** @internal */\n    executeActionWithSubject(action, subject) {\n        this.zone.runOutsideAngular(() => {\n            // tslint:disable-next-line:no-any\n            this.grecaptcha.execute(this.siteKey, { action }).then((token) => {\n                this.zone.run(() => {\n                    subject.next(token);\n                    subject.complete();\n                    if (this.onExecuteSubject) {\n                        this.onExecuteSubject.next({ action, token });\n                    }\n                });\n            });\n        });\n    }\n    /** @internal */\n    init() {\n        if (this.isBrowser) {\n            if ('grecaptcha' in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                loadScript(this.siteKey, this.onLoadComplete, '', this.baseUrl, this.nonce);\n            }\n        }\n    }\n};\nReCaptchaV3Service = __decorate([\n    Injectable(),\n    __param(1, Inject(RECAPTCHA_V3_SITE_KEY)),\n    __param(2, Inject(PLATFORM_ID)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_BASE_URL)),\n    __param(4, Optional()), __param(4, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [NgZone, String, Object, String, String])\n], ReCaptchaV3Service);\n\nlet RecaptchaV3Module = class RecaptchaV3Module {\n};\nRecaptchaV3Module = __decorate([\n    NgModule({\n        providers: [\n            ReCaptchaV3Service,\n        ],\n    })\n], RecaptchaV3Module);\n\nlet RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = class RecaptchaValueAccessorDirective {\n    constructor(host) {\n        this.host = host;\n    }\n    writeValue(value) {\n        if (!value) {\n            this.host.reset();\n        }\n    }\n    registerOnChange(fn) { this.onChange = fn; }\n    registerOnTouched(fn) { this.onTouched = fn; }\n    onResolve($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n};\n__decorate([\n    HostListener('resolved', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", void 0)\n], RecaptchaValueAccessorDirective.prototype, \"onResolve\", null);\nRecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = __decorate([\n    Directive({\n        providers: [\n            {\n                multi: true,\n                provide: NG_VALUE_ACCESSOR,\n                // tslint:disable-next-line:no-forward-ref\n                useExisting: forwardRef(() => RecaptchaValueAccessorDirective_1),\n            },\n        ],\n        // tslint:disable-next-line:directive-selector\n        selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]',\n    }),\n    __metadata(\"design:paramtypes\", [RecaptchaComponent])\n], RecaptchaValueAccessorDirective);\nvar RecaptchaValueAccessorDirective_1;\n\nlet RecaptchaFormsModule = class RecaptchaFormsModule {\n};\nRecaptchaFormsModule = __decorate([\n    NgModule({\n        declarations: [\n            RecaptchaValueAccessorDirective,\n        ],\n        exports: [RecaptchaValueAccessorDirective],\n        imports: [FormsModule, RecaptchaCommonModule],\n    })\n], RecaptchaFormsModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective, RecaptchaCommonModule as ɵa };\n//# sourceMappingURL=ng-recaptcha.js.map\n","export default \"<div class=\\\"container\\\">\\n  <h1 class=\\\"page-title\\\"><b>Contact Form</b></h1>\\n  <div class=\\\"content\\\">\\n    <form [formGroup]=\\\"contactForm\\\" (ngSubmit)=\\\"submitMessage()\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">Name*</label>\\n        <input id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.name.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.name.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.name.errors.required\\\">Name is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email*</label>\\n        <input id=\\\"email\\\" type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n          <div *ngIf=\\\"f.email.errors.email\\\">Invalid email</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"subject\\\">Subject*</label>\\n        <input id=\\\"subject\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"subject\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.subject.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.subject.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.subject.errors.required\\\">Subject is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"message\\\">Message*</label>\\n        <textarea rows=\\\"5\\\" id=\\\"message\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"message\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.message.errors }\\\"></textarea>\\n        <div *ngIf=\\\"submitted && f.message.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.message.errors.required\\\">Message is required</div>\\n        </div>\\n        <br>\\n        <small>\\n          <p>This site is protected by reCAPTCHA and the Google\\n            <a href=\\\"https://policies.google.com/privacy\\\">Privacy Policy</a> and\\n            <a href=\\\"https://policies.google.com/terms\\\">Terms of Service</a> apply.\\n          </p>\\n        </small>\\n      </div>\\n      <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Send message</button>\\n    </form>\\n  </div>\\n</div>\\n\"","export default \"<div class=\\\"custom-padding\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-8\\\">\\n        <app-contact-form></app-contact-form>\\n      </div>\\n      <div class=\\\"col-sm-4\\\">\\n        <h1 class=\\\"page-title\\\">Contact</h1>\\n        <div class=\\\"content\\\">\\n          <span property=\\\"dc:title\\\" content=\\\"Contact\\\" class=\\\"rdf-meta element-hidden\\\"></span>\\n          <p>Honoursvereniging Ockham<br>University of Twente<br>KVK 08209433</p>\\n          <p>De Bastille (postvak 47)<br>Postbus 217<br>7500 AE, Enschede</p>\\n          <p>Visiting Adress:<br>Technohal TL1334C<br>Hallenweg 5<br>7522NH Enschede<br><br>E-mail:<br><a href=\\\"mailto:Board@hvockham.nl\\\">Board@hvockham.nl</a><br><a href=\\\"mailto:Secretary@hvockham.nl\\\">Secretary@hvockham.nl</a></p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n  baseUrl:string = '/api/v1/contact';\n\n  constructor(private httpClient: HttpClient) { }\n\n  public sendMessage(obj) {\n    return this.httpClient.post(this.baseUrl, obj, {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json',\n      })\n    });\n  }\n}\n","export default \"#submit {\\n  margin-top: 20px;\\n  margin-bottom: 40px;\\n}\\n\\n.alert {\\n  max-width: 595px;\\n}\\n\\nsmall {\\n  font-weight: lighter;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ha2hpbGJhbmRpL0Rlc2t0b3AvRGVzaWduIFByb2plY3Qvb2NraGFtLWZyb250ZW5kL3NyYy9hcHAvbW9kdWxlcy9jb250YWN0L2NvbnRhY3QtZm9ybS9jb250YWN0LWZvcm0uY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL21vZHVsZXMvY29udGFjdC9jb250YWN0LWZvcm0vY29udGFjdC1mb3JtLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQUE7RUFDQSxtQkFBQTtBQ0NGOztBREVBO0VBQ0UsZ0JBQUE7QUNDRjs7QURFQTtFQUNFLG9CQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL2NvbnRhY3QvY29udGFjdC1mb3JtL2NvbnRhY3QtZm9ybS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNzdWJtaXQge1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xufVxuXG4uYWxlcnQge1xuICBtYXgtd2lkdGg6IDU5NXB4O1xufVxuXG5zbWFsbCB7XG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xufVxuIiwiI3N1Ym1pdCB7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIG1hcmdpbi1ib3R0b206IDQwcHg7XG59XG5cbi5hbGVydCB7XG4gIG1heC13aWR0aDogNTk1cHg7XG59XG5cbnNtYWxsIHtcbiAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ContactService } from 'src/app/core/services/contact.service';\nimport {NotifierService} from 'angular-notifier';\nimport {ReCaptchaV3Service} from 'ng-recaptcha';\nimport {cloneDeep} from 'lodash';\n\n@Component({\n  selector: 'app-contact-form',\n  templateUrl: './contact-form.component.html',\n  styleUrls: ['./contact-form.component.scss']\n})\n\nexport class ContactFormComponent implements OnInit {\n  contactForm = new FormGroup ({\n    name: new FormControl('', Validators.required),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    subject: new FormControl('', Validators.required),\n    message: new FormControl('', Validators.required),\n  });\n\n  submitted = false;\n\n  constructor(private contactService: ContactService,\n              private notifierService: NotifierService,\n              private reCaptchaV3Service: ReCaptchaV3Service) {}\n\n  ngOnInit() {\n  }\n\n  get f() { return this.contactForm.controls; }\n\n  submitMessage() {\n    this.submitted = true;\n\n    if (this.contactForm.invalid) {\n      return;\n    }\n\n    this.reCaptchaV3Service.execute('contact').subscribe(token => {\n      const payload = cloneDeep(this.contactForm.value);\n      payload.recaptcha_token = token;\n      this.contactService.sendMessage(payload)\n        .subscribe(() => {\n          this.submitted = false;\n          this.contactForm.reset();\n          this.notifierService.notify('default', 'You message has been sent.');\n        }, () => this.notifierService.notify('error', 'Something went wrong, please try again later.'));\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ContactComponent } from './contact.component';\n\nconst routes: Routes =\n  [\n    { path: '', component: ContactComponent },\n  ];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ContactRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29udGFjdC9jb250YWN0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.scss']\n})\nexport class ContactComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ContactRoutingModule } from './contact-routing.module';\nimport { ContactComponent } from './contact.component';\nimport {ContactFormComponent} from './contact-form/contact-form.component';\nimport { RECAPTCHA_V3_SITE_KEY, RecaptchaV3Module } from 'ng-recaptcha';\n\n@NgModule({\n  declarations: [ContactComponent, ContactFormComponent],\n  exports: [\n    ContactComponent\n  ],\n  imports: [\n    CommonModule,\n    ContactRoutingModule,\n    SharedModule,\n    RecaptchaV3Module\n  ],\n  providers: [\n    { provide: RECAPTCHA_V3_SITE_KEY, useValue: '6Lf0e98UAAAAAMh4Xsu8b5iIr40bmnYT4KfpS4ID' }, // TODO: change site key!\n  ],\n})\nexport class ContactModule { }\n"],"sourceRoot":"webpack:///"}