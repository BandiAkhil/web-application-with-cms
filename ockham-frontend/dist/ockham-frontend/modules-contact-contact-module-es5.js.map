{"version":3,"sources":["node_modules/ng-recaptcha/fesm2015/ng-recaptcha.js","src/app/modules/contact/contact-form/contact-form.component.html","src/app/modules/contact/contact.component.html","src/app/core/services/contact.service.ts","src/app/modules/contact/contact-form/contact-form.component.scss","src/app/modules/contact/contact-form/contact-form.component.ts","src/app/modules/contact/contact-routing.module.ts","src/app/modules/contact/contact.component.scss","src/app/modules/contact/contact.component.ts","src/app/modules/contact/contact.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Optional, EventEmitter, Input, HostBinding, Output, Component, ElementRef, NgZone, NgModule, HostListener, Directive, forwardRef } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nconst RECAPTCHA_LANGUAGE = new InjectionToken('recaptcha-language');\nconst RECAPTCHA_BASE_URL = new InjectionToken('recaptcha-base-url');\nconst RECAPTCHA_NONCE = new InjectionToken('recaptcha-nonce-tag');\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = () => {\n        onLoaded(grecaptcha);\n    };\n    const script = document.createElement('script');\n    script.innerHTML = '';\n    const baseUrl = url || 'https://www.google.com/recaptcha/api.js';\n    script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n    if (nonce) {\n        // tslint:disable-next-line:no-any Remove \"any\" cast once we upgrade Angular to 7 and TypeScript along with it\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nlet RecaptchaLoaderService = RecaptchaLoaderService_1 = class RecaptchaLoaderService {\n    constructor(\n    // tslint:disable-next-line:no-any\n    platformId, language, baseUrl, nonce) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService_1.ready.asObservable() : of();\n    }\n    /** @internal */\n    init() {\n        if (RecaptchaLoaderService_1.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            const subject = new BehaviorSubject(null);\n            RecaptchaLoaderService_1.ready = subject;\n            const langParam = this.language ? '&hl=' + this.language : '';\n            loadScript('explicit', (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n        }\n    }\n};\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService = RecaptchaLoaderService_1 = __decorate([\n    Injectable(),\n    __param(0, Inject(PLATFORM_ID)),\n    __param(1, Optional()), __param(1, Inject(RECAPTCHA_LANGUAGE)),\n    __param(2, Optional()), __param(2, Inject(RECAPTCHA_BASE_URL)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [Object, String, String, String])\n], RecaptchaLoaderService);\nvar RecaptchaLoaderService_1;\n\nconst RECAPTCHA_SETTINGS = new InjectionToken('recaptcha-settings');\n\nlet nextId = 0;\nlet RecaptchaComponent = class RecaptchaComponent {\n    constructor(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = `ngrecaptcha-${nextId++}`;\n        this.resolved = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    ngAfterViewInit() {\n        this.subscription = this.loader.ready.subscribe((grecaptcha) => {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                this.grecaptcha = grecaptcha;\n                this.renderRecaptcha();\n            }\n        });\n    }\n    ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute() {\n        if (this.size !== 'invisible') {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    }\n    reset() {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    }\n    /** @internal */\n    expired() {\n        this.resolved.emit(null);\n    }\n    /** @internal */\n    captchaResponseCallback(response) {\n        this.resolved.emit(response);\n    }\n    /** @internal */\n    grecaptchaReset() {\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n        }\n    }\n    /** @internal */\n    renderRecaptcha() {\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n            badge: this.badge,\n            callback: (response) => {\n                this.zone.run(() => this.captchaResponseCallback(response));\n            },\n            'expired-callback': () => {\n                this.zone.run(() => this.expired());\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        });\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    }\n};\n__decorate([\n    Input(),\n    HostBinding('attr.id'),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"id\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"siteKey\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"type\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"size\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], RecaptchaComponent.prototype, \"tabIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"badge\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"resolved\", void 0);\nRecaptchaComponent = __decorate([\n    Component({\n        exportAs: 'reCaptcha',\n        selector: 're-captcha',\n        template: ``\n    }),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_SETTINGS)),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        RecaptchaLoaderService,\n        NgZone, Object])\n], RecaptchaComponent);\n\nlet RecaptchaCommonModule = class RecaptchaCommonModule {\n};\nRecaptchaCommonModule = __decorate([\n    NgModule({\n        declarations: [\n            RecaptchaComponent,\n        ],\n        exports: [\n            RecaptchaComponent,\n        ],\n    })\n], RecaptchaCommonModule);\n\nlet RecaptchaModule = RecaptchaModule_1 = class RecaptchaModule {\n    // We need this to maintain backwards-compatibility with v4. Removing this will be a breaking change\n    static forRoot() {\n        return RecaptchaModule_1;\n    }\n};\nRecaptchaModule = RecaptchaModule_1 = __decorate([\n    NgModule({\n        exports: [\n            RecaptchaComponent,\n        ],\n        imports: [\n            RecaptchaCommonModule,\n        ],\n        providers: [\n            RecaptchaLoaderService,\n        ],\n    })\n], RecaptchaModule);\nvar RecaptchaModule_1;\n\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken('recaptcha-v3-site-key');\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nlet ReCaptchaV3Service = class ReCaptchaV3Service {\n    constructor(zone, siteKey, \n    // tslint:disable-next-line:no-any\n    platformId, baseUrl, nonce) {\n        /** @internal */\n        this.onLoadComplete = (grecaptcha) => {\n            this.grecaptcha = grecaptcha;\n            if (this.actionBacklog && this.actionBacklog.length > 0) {\n                this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n                this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    get onExecute() {\n        if (!this.onExecuteSubject) {\n            this.onExecuteSubject = new Subject();\n            this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n        return this.onExecuteObservable;\n    }\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    execute(action) {\n        const subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                // todo: add to array of later executions\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    }\n    /** @internal */\n    executeActionWithSubject(action, subject) {\n        this.zone.runOutsideAngular(() => {\n            // tslint:disable-next-line:no-any\n            this.grecaptcha.execute(this.siteKey, { action }).then((token) => {\n                this.zone.run(() => {\n                    subject.next(token);\n                    subject.complete();\n                    if (this.onExecuteSubject) {\n                        this.onExecuteSubject.next({ action, token });\n                    }\n                });\n            });\n        });\n    }\n    /** @internal */\n    init() {\n        if (this.isBrowser) {\n            if ('grecaptcha' in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                loadScript(this.siteKey, this.onLoadComplete, '', this.baseUrl, this.nonce);\n            }\n        }\n    }\n};\nReCaptchaV3Service = __decorate([\n    Injectable(),\n    __param(1, Inject(RECAPTCHA_V3_SITE_KEY)),\n    __param(2, Inject(PLATFORM_ID)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_BASE_URL)),\n    __param(4, Optional()), __param(4, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [NgZone, String, Object, String, String])\n], ReCaptchaV3Service);\n\nlet RecaptchaV3Module = class RecaptchaV3Module {\n};\nRecaptchaV3Module = __decorate([\n    NgModule({\n        providers: [\n            ReCaptchaV3Service,\n        ],\n    })\n], RecaptchaV3Module);\n\nlet RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = class RecaptchaValueAccessorDirective {\n    constructor(host) {\n        this.host = host;\n    }\n    writeValue(value) {\n        if (!value) {\n            this.host.reset();\n        }\n    }\n    registerOnChange(fn) { this.onChange = fn; }\n    registerOnTouched(fn) { this.onTouched = fn; }\n    onResolve($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n};\n__decorate([\n    HostListener('resolved', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", void 0)\n], RecaptchaValueAccessorDirective.prototype, \"onResolve\", null);\nRecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = __decorate([\n    Directive({\n        providers: [\n            {\n                multi: true,\n                provide: NG_VALUE_ACCESSOR,\n                // tslint:disable-next-line:no-forward-ref\n                useExisting: forwardRef(() => RecaptchaValueAccessorDirective_1),\n            },\n        ],\n        // tslint:disable-next-line:directive-selector\n        selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]',\n    }),\n    __metadata(\"design:paramtypes\", [RecaptchaComponent])\n], RecaptchaValueAccessorDirective);\nvar RecaptchaValueAccessorDirective_1;\n\nlet RecaptchaFormsModule = class RecaptchaFormsModule {\n};\nRecaptchaFormsModule = __decorate([\n    NgModule({\n        declarations: [\n            RecaptchaValueAccessorDirective,\n        ],\n        exports: [RecaptchaValueAccessorDirective],\n        imports: [FormsModule, RecaptchaCommonModule],\n    })\n], RecaptchaFormsModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective, RecaptchaCommonModule as ɵa };\n//# sourceMappingURL=ng-recaptcha.js.map\n","export default \"<div class=\\\"container\\\">\\n  <h1 class=\\\"page-title\\\"><b>Contact Form</b></h1>\\n  <div class=\\\"content\\\">\\n    <form [formGroup]=\\\"contactForm\\\" (ngSubmit)=\\\"submitMessage()\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">Name*</label>\\n        <input id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.name.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.name.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.name.errors.required\\\">Name is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email*</label>\\n        <input id=\\\"email\\\" type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n          <div *ngIf=\\\"f.email.errors.email\\\">Invalid email</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"subject\\\">Subject*</label>\\n        <input id=\\\"subject\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"subject\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.subject.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.subject.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.subject.errors.required\\\">Subject is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"message\\\">Message*</label>\\n        <textarea rows=\\\"5\\\" id=\\\"message\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"message\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.message.errors }\\\"></textarea>\\n        <div *ngIf=\\\"submitted && f.message.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.message.errors.required\\\">Message is required</div>\\n        </div>\\n        <br>\\n        <small>\\n          <p>This site is protected by reCAPTCHA and the Google\\n            <a href=\\\"https://policies.google.com/privacy\\\">Privacy Policy</a> and\\n            <a href=\\\"https://policies.google.com/terms\\\">Terms of Service</a> apply.\\n          </p>\\n        </small>\\n      </div>\\n      <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Send message</button>\\n    </form>\\n  </div>\\n</div>\\n\"","export default \"<div class=\\\"custom-padding\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-8\\\">\\n        <app-contact-form></app-contact-form>\\n      </div>\\n      <div class=\\\"col-sm-4\\\">\\n        <h1 class=\\\"page-title\\\">Contact</h1>\\n        <div class=\\\"content\\\">\\n          <span property=\\\"dc:title\\\" content=\\\"Contact\\\" class=\\\"rdf-meta element-hidden\\\"></span>\\n          <p>Honoursvereniging Ockham<br>University of Twente<br>KVK 08209433</p>\\n          <p>De Bastille (postvak 47)<br>Postbus 217<br>7500 AE, Enschede</p>\\n          <p>Visiting Adress:<br>Technohal TL1334C<br>Hallenweg 5<br>7522NH Enschede<br><br>E-mail:<br><a href=\\\"mailto:Board@hvockham.nl\\\">Board@hvockham.nl</a><br><a href=\\\"mailto:Secretary@hvockham.nl\\\">Secretary@hvockham.nl</a></p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n  baseUrl:string = '/api/v1/contact';\n\n  constructor(private httpClient: HttpClient) { }\n\n  public sendMessage(obj) {\n    return this.httpClient.post(this.baseUrl, obj, {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json',\n      })\n    });\n  }\n}\n","export default \"#submit {\\n  margin-top: 20px;\\n  margin-bottom: 40px;\\n}\\n\\n.alert {\\n  max-width: 595px;\\n}\\n\\nsmall {\\n  font-weight: lighter;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ha2hpbGJhbmRpL0Rlc2t0b3AvRGVzaWduIFByb2plY3Qvb2NraGFtLWZyb250ZW5kL3NyYy9hcHAvbW9kdWxlcy9jb250YWN0L2NvbnRhY3QtZm9ybS9jb250YWN0LWZvcm0uY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL21vZHVsZXMvY29udGFjdC9jb250YWN0LWZvcm0vY29udGFjdC1mb3JtLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQUE7RUFDQSxtQkFBQTtBQ0NGOztBREVBO0VBQ0UsZ0JBQUE7QUNDRjs7QURFQTtFQUNFLG9CQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL2NvbnRhY3QvY29udGFjdC1mb3JtL2NvbnRhY3QtZm9ybS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNzdWJtaXQge1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xufVxuXG4uYWxlcnQge1xuICBtYXgtd2lkdGg6IDU5NXB4O1xufVxuXG5zbWFsbCB7XG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xufVxuIiwiI3N1Ym1pdCB7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIG1hcmdpbi1ib3R0b206IDQwcHg7XG59XG5cbi5hbGVydCB7XG4gIG1heC13aWR0aDogNTk1cHg7XG59XG5cbnNtYWxsIHtcbiAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ContactService } from 'src/app/core/services/contact.service';\nimport {NotifierService} from 'angular-notifier';\nimport {ReCaptchaV3Service} from 'ng-recaptcha';\nimport {cloneDeep} from 'lodash';\n\n@Component({\n  selector: 'app-contact-form',\n  templateUrl: './contact-form.component.html',\n  styleUrls: ['./contact-form.component.scss']\n})\n\nexport class ContactFormComponent implements OnInit {\n  contactForm = new FormGroup ({\n    name: new FormControl('', Validators.required),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    subject: new FormControl('', Validators.required),\n    message: new FormControl('', Validators.required),\n  });\n\n  submitted = false;\n\n  constructor(private contactService: ContactService,\n              private notifierService: NotifierService,\n              private reCaptchaV3Service: ReCaptchaV3Service) {}\n\n  ngOnInit() {\n  }\n\n  get f() { return this.contactForm.controls; }\n\n  submitMessage() {\n    this.submitted = true;\n\n    if (this.contactForm.invalid) {\n      return;\n    }\n\n    this.reCaptchaV3Service.execute('contact').subscribe(token => {\n      const payload = cloneDeep(this.contactForm.value);\n      payload.recaptcha_token = token;\n      this.contactService.sendMessage(payload)\n        .subscribe(() => {\n          this.submitted = false;\n          this.contactForm.reset();\n          this.notifierService.notify('default', 'You message has been sent.');\n        }, () => this.notifierService.notify('error', 'Something went wrong, please try again later.'));\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ContactComponent } from './contact.component';\n\nconst routes: Routes =\n  [\n    { path: '', component: ContactComponent },\n  ];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ContactRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29udGFjdC9jb250YWN0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.scss']\n})\nexport class ContactComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ContactRoutingModule } from './contact-routing.module';\nimport { ContactComponent } from './contact.component';\nimport {ContactFormComponent} from './contact-form/contact-form.component';\nimport { RECAPTCHA_V3_SITE_KEY, RecaptchaV3Module } from 'ng-recaptcha';\n\n@NgModule({\n  declarations: [ContactComponent, ContactFormComponent],\n  exports: [\n    ContactComponent\n  ],\n  imports: [\n    CommonModule,\n    ContactRoutingModule,\n    SharedModule,\n    RecaptchaV3Module\n  ],\n  providers: [\n    { provide: RECAPTCHA_V3_SITE_KEY, useValue: '6Lf0e98UAAAAAMh4Xsu8b5iIr40bmnYT4KfpS4ID' }, // TODO: change site key!\n  ],\n})\nexport class ContactModule { }\n"],"sourceRoot":"webpack:///","file":"modules-contact-contact-module-es5.js"}