{"version":3,"sources":["./src/app/modules/account/account-information/account-information.component.html","./src/app/modules/account/account.component.html","./src/app/modules/account/change-password/change-password.component.html","./src/app/modules/account/mailing-lists/mailing-lists.component.html","./src/app/core/services/mailing-list.service.ts","./src/app/modules/account/account-information/account-information.component.scss","./src/app/modules/account/account-information/account-information.component.ts","./src/app/modules/account/account-routing.module.ts","./src/app/modules/account/account.component.scss","./src/app/modules/account/account.component.ts","./src/app/modules/account/account.module.ts","./src/app/modules/account/change-password/change-password.component.scss","./src/app/modules/account/change-password/change-password.component.ts","./src/app/modules/account/mailing-lists/mailing-lists.component.scss","./src/app/modules/account/mailing-lists/mailing-lists.component.ts"],"names":[],"mappings":"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","file":"modules-account-account-module-es2015.js","sourcesContent":["export default \"<h3>Information</h3>\\n<form [formGroup]=\\\"accountForm\\\">\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col-md-8 col-sm-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"first-name\\\">First name</label>\\n        <input id=\\\"first-name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"first_name\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.first_name.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.first_name.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.first_name.errors.required\\\">First name is required</div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-4 col-sm-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"insertion\\\">Insertion</label>\\n        <input id=\\\"insertion\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"insertion\\\">\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col-md-8 col-sm-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"last-name\\\">Last name</label>\\n        <input id=\\\"last-name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"last_name\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.last_name.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.last_name.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.last_name.errors.required\\\">Last name is required</div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-4 col-sm-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"initials\\\">Initials</label>\\n        <input id=\\\"initials\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"initials\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.initials.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.initials.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.initials.errors.required\\\">Initials is required</div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col-md-6 col-xs-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input id=\\\"email\\\" type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n          <div *ngIf=\\\"f.email.errors.email\\\">Invalid email</div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-6 col-xs-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"phone-number\\\">Phone number</label>\\n        <input id=\\\"phone-number\\\" type=\\\"tel\\\" class=\\\"form-control\\\" formControlName=\\\"phone_number\\\">\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col-md-8 col-sm-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"address\\\">Address</label>\\n        <input id=\\\"address\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"address\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-4 col-sm-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"zip-code\\\">Zip code</label>\\n        <input id=\\\"zip-code\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"zip_code\\\">\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col-md-6 col-sm-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"residence\\\">Residence</label>\\n        <input id=\\\"residence\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"residence\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-6 col-sm-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"residence\\\">Country</label>\\n        <input id=\\\"country\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"country\\\">\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-auto\\\">\\n      <button class=\\\"btn btn-success\\\" (click)=\\\"onUpdate()\\\">Update</button>\\n    </div>\\n    <div class=\\\"col-auto ml-auto\\\">\\n      <button class=\\\"btn btn-outline-primary\\\" routerLink=\\\"/\\\">Cancel</button>\\n    </div>\\n  </div>\\n</form>\\n\"","export default \"<div class=\\\"custom-padding\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"page-title\\\">My Account</h1>\\n\\n    <ul class=\\\"nav nav-tabs\\\" role=\\\"tablist\\\">\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link pointer active\\\" data-toggle=\\\"tab\\\" (click)=\\\"setActive('details')\\\">Details</a>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link pointer\\\" data-toggle=\\\"tab\\\" (click)=\\\"setActive('mailing_lists')\\\">Mailing lists</a>\\n      </li>\\n    </ul>\\n\\n    <div class=\\\"row pt-4\\\" *ngIf=\\\"isActive('details')\\\">\\n      <div class=\\\"col-md-6 col-sm-12\\\">\\n        <app-account-information></app-account-information>\\n      </div>\\n      <div class=\\\"col-md-6 col-sm-12\\\">\\n        <app-change-password></app-change-password>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row pt-4\\\" *ngIf=\\\"isActive('mailing_lists')\\\">\\n      <div class=\\\"col-12\\\">\\n        <app-mailing-lists></app-mailing-lists>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<h3>Change password</h3>\\n<form [formGroup]=\\\"passwordForm\\\">\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"old-password\\\">Old password*</label>\\n        <input id=\\\"old-password\\\" type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"old_password\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && f.old_password.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.old_password.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.old_password.errors.required\\\">Old password is required</div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"new-password\\\">New password*</label>\\n        <input id=\\\"new-password\\\" type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"new_password\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted && (f.new_password.errors || passwordForm.errors?.notSame) }\\\">\\n        <div *ngIf=\\\"submitted && (f.new_password.errors || passwordForm.errors?.notSame)\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.new_password.errors?.required; else newPasswordSame\\\">New password is required</div>\\n          <ng-template #newPasswordSame>\\n            <div *ngIf=\\\"passwordForm.errors?.notSame\\\">Passwords don't match</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"repeat-password\\\">Repeat password*</label>\\n        <input id=\\\"repeat-password\\\" type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"repeat_new_password\\\"\\n               [ngClass]=\\\"{ 'is-invalid': submitted &&  (f.repeat_new_password.errors || passwordForm.errors?.notSame) }\\\">\\n        <div *ngIf=\\\"submitted && (f.repeat_new_password.errors || passwordForm.errors?.notSame)\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.repeat_new_password.errors?.required; else repeatPasswordSame\\\">Repeat password is required</div>\\n          <ng-template #repeatPasswordSame>\\n            <div *ngIf=\\\"passwordForm.errors?.notSame\\\">Passwords don't match</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-auto\\\">\\n      <button class=\\\"btn btn-success\\\" (click)=\\\"onChangePassword()\\\">Change password</button>\\n    </div>\\n  </div>\\n</form>\\n\"","export default \"<h3 class=\\\"pb-4\\\">Mailing lists</h3>\\n<table class=\\\"table w-100\\\"> \\n  <thead>\\n    <tr>\\n      <th>Name</th>\\n      <th>Action</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor=\\\"let mailingList of mailingLists\\\">\\n      <td>\\n        {{ mailingList.name }}\\n        &nbsp;<span class=\\\"badge badge-success\\\" *ngIf=\\\"mailingList.subscribed\\\">Subscribed</span>\\n      </td>\\n      <td>\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-success\\\" *ngIf=\\\"!mailingList.subscribed\\\" (click)=\\\"subscribeToMailingList(mailingList)\\\">Subscribe</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger\\\" *ngIf=\\\"mailingList.subscribed\\\" (click)=\\\"unsubscribeFromMailingList(mailingList)\\\">Unsubscribe</button>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\"","import { Injectable } from '@angular/core';\nimport { MailingList } from '../models/mailing_list';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { shareReplay } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MailingListService {\n\n  private baseUrl = 'api/v1/mailing-lists';\n\n  private cache$: Observable<MailingList[]>;\n\n  // private cache$: Observable<MailingList[]> = of([\n  //   {\n  //     id: 'c20e394ceb',\n  //     name: 'Test',\n  //     subscribed: true\n  //   },\n  //   {\n  //     id: 'c20e394ceb',\n  //     name: 'Test 2',\n  //     subscribed: false\n  //   },\n  //   {\n  //     id: 'c20e394ceb',\n  //     name: 'Test 3',\n  //     subscribed: false\n  //   },\n  //   {\n  //     id: 'c20e394ceb',\n  //     name: 'Test 4',\n  //     subscribed: true\n  //   },\n  //   {\n  //     id: 'c20e394ceb',\n  //     name: 'Test 5',\n  //     subscribed: true\n  //   }\n  // ]);\n\n  constructor(private http: HttpClient) { }\n\n  get mailingLists() {\n    if (!this.cache$) {\n      this.cache$ = this.fetchMailingLists().pipe(shareReplay(1));\n    }\n    return this.cache$;\n  }\n\n  fetchMailingLists() {\n    return this.http.get<MailingList[]>(this.baseUrl);\n  }\n\n  subscribeToMailingList(list_id: string) {\n    return this.http.post<any>(`${this.baseUrl}/${list_id}/subscribe`, null);\n  }\n\n  unsubscribeFromMailingList(list_id: string) {\n    return this.http.post<any>(`${this.baseUrl}/${list_id}/unsubscribe`, null);\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYWNjb3VudC9hY2NvdW50LWluZm9ybWF0aW9uL2FjY291bnQtaW5mb3JtYXRpb24uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport {Member} from 'src/app/core/models/member';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {NotifierService} from 'angular-notifier';\nimport {AuthenticationService} from 'src/app/core/services/authentication.service';\nimport {MemberService} from 'src/app/core/services/member.service';\nimport {cloneDeep} from 'lodash';\n\n@Component({\n  selector: 'app-account-information',\n  templateUrl: './account-information.component.html',\n  styleUrls: ['./account-information.component.scss']\n})\nexport class AccountInformationComponent implements OnInit {\n\n  user: Member;\n\n  accountForm = new FormGroup({\n    first_name: new FormControl('', Validators.required),\n    insertion: new FormControl(''),\n    last_name: new FormControl('', Validators.required),\n    initials: new FormControl('', Validators.required),\n    phone_number: new FormControl(''),\n    address: new FormControl(''),\n    zip_code: new FormControl(''),\n    residence: new FormControl(''),\n    country: new FormControl(''),\n    email: new FormControl('', [Validators.required, Validators.email])\n  });\n\n  submitted = false;\n\n  constructor(private notifierService: NotifierService,\n              private authService: AuthenticationService,\n              private memberService: MemberService) { }\n\n  ngOnInit() {\n    this.authService.getUser()\n      .subscribe(user => {\n        this.user = user;\n        this.accountForm.patchValue(user);\n      });\n  }\n\n  get f() { return this.accountForm.controls; }\n\n  onUpdate() {\n    this.submitted = true;\n\n    if (this.accountForm.invalid) {\n      return;\n    }\n\n    const user: Member = Object.assign(cloneDeep(this.user), this.accountForm.value);\n\n    this.memberService.updateMember(user, user.id)\n      .subscribe(member => {\n        this.notifierService.notify('default', 'Your account has been updated.');\n        this.authService.setUser(member);\n      });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AccountComponent } from './account.component';\n\nconst routes: Routes = [{ path: '', component: AccountComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYWNjb3VudC9hY2NvdW50LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.scss']\n})\nexport class AccountComponent implements OnInit {\n\n  active: string = 'details';\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  isActive(tab: string) {\n    return this.active === tab;\n  }\n\n  setActive(tab: string) {\n    if (this.active === tab) return;\n    this.active = tab;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { AccountComponent } from './account.component';\nimport {SharedModule} from \"../../shared/shared.module\";\nimport { ChangePasswordComponent } from './change-password/change-password.component';\nimport { AccountInformationComponent } from './account-information/account-information.component';\nimport { MailingListsComponent } from './mailing-lists/mailing-lists.component';\n\n\n@NgModule({\n  declarations: [AccountComponent, ChangePasswordComponent, AccountInformationComponent, MailingListsComponent],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    SharedModule\n  ]\n})\nexport class AccountModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYWNjb3VudC9jaGFuZ2UtcGFzc3dvcmQvY2hhbmdlLXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport { cloneDeep } from 'lodash';\nimport {AuthenticationService} from \"../../../core/services/authentication.service\";\nimport {MemberService} from \"../../../core/services/member.service\";\nimport {NotifierService} from \"angular-notifier\";\nimport { samePasswords } from 'src/app/shared/validators/same-passwords.validator';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n  passwordForm = new FormGroup({\n    old_password: new FormControl('', Validators.required),\n    new_password: new FormControl('', Validators.required),\n    repeat_new_password: new FormControl('', Validators.required)\n  }, { validators: samePasswords });\n\n  submitted = false;\n\n  constructor(private authService: AuthenticationService,\n              private memberService: MemberService,\n              private notifierService: NotifierService) { }\n\n  ngOnInit() {\n  }\n\n  get f() { return this.passwordForm.controls; }\n\n  onChangePassword() {\n    this.submitted = true;\n\n    if (this.passwordForm.invalid) {\n      return;\n    }\n\n    const data = cloneDeep(this.passwordForm.value);\n    delete data.repeat_password; // Not needed\n\n    this.authService.getUser()\n      .subscribe(u => {\n        this.memberService.changePassword(u, data)\n          .subscribe(() => {\n            this.notifierService.notify('default', 'Your password has been changed.');\n          }, error =>  {\n            this.notifierService.notify('error', 'The old password is incorrect.');\n          });\n      });\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYWNjb3VudC9tYWlsaW5nLWxpc3RzL21haWxpbmctbGlzdHMuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { NotifierService } from 'angular-notifier';\nimport { MailingList } from 'src/app/core/models/mailing_list';\nimport { MailingListService } from 'src/app/core/services/mailing-list.service';\n\n@Component({\n  selector: 'app-mailing-lists',\n  templateUrl: './mailing-lists.component.html',\n  styleUrls: ['./mailing-lists.component.scss']\n})\nexport class MailingListsComponent implements OnInit {\n\n  mailingLists: MailingList[];\n\n  constructor(private mailingListService: MailingListService, private notifierService: NotifierService) { }\n\n  ngOnInit() {\n    this.getMailingLists();\n  }\n\n  getMailingLists() {\n    this.mailingListService.mailingLists.subscribe(mailingLists => this.mailingLists = mailingLists);\n  }\n\n  subscribeToMailingList(mailingList: MailingList) {\n    this.mailingListService.subscribeToMailingList(mailingList.id)\n      .subscribe(() => {\n        this.notifierService.notify('default', `You are now subscribed to ${mailingList.name}.`);\n        this.mailingListService.fetchMailingLists().subscribe(mailingLists => this.mailingLists = mailingLists);\n      }, error => {\n        this.notifierService.notify('error', `An error occurred: ${error.error.message}`);\n      });\n  }\n\n  unsubscribeFromMailingList(mailingList: MailingList) {\n    this.mailingListService.unsubscribeFromMailingList(mailingList.id)\n      .subscribe(() => {\n        this.notifierService.notify('default', `You are now unsubscribed from ${mailingList.name}.`);\n        this.mailingListService.fetchMailingLists().subscribe(mailingLists => this.mailingLists = mailingLists);\n      }, error => {\n        this.notifierService.notify('error', `An error occurred: ${error.error.message}`);\n      });\n  }\n}\n"],"sourceRoot":"webpack:///"}